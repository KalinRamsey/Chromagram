{"ast":null,"code":"var _jsxFileName = \"/Users/kalinramsey/Projects/ColorContrastChecker/chromagraph/src/Contexts/ThemeContext.tsx\",\n  _s = $RefreshSig$();\nimport React, { createContext, useEffect, useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const ThemeContext = /*#__PURE__*/createContext({\n  theme: \"dark\",\n  toggleTheme: () => {}\n});\nexport const ThemeContextProvider = ({\n  children\n}) => {\n  _s();\n  const [theme, setTheme] = useState();\n  useEffect(() => {\n    console.log('Setting initial theme:');\n    if (localStorage.theme === \"dark\" || !(\"theme\" in localStorage) && window.matchMedia(\"(prefers-color-scheme: dark)\").matches) {\n      setDarkMode(true);\n      document.documentElement.classList.add(\"dark\");\n    } else {\n      setDarkMode(false);\n      document.documentElement.classList.remove(\"dark\");\n    }\n    console.log(darkMode ? 'dark' : 'light');\n  }, []);\n  const toggleDarkMode = () => {\n    if (darkMode) {\n      document.documentElement.classList.remove(\"dark\");\n      localStorage.theme = \"light\";\n      setDarkMode(false);\n    } else {\n      document.documentElement.classList.add(\"dark\");\n      localStorage.theme = \"dark\";\n      setDarkMode(true);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(ThemeContext.Provider, {\n    value: {\n      darkMode,\n      toggleDarkMode\n    },\n    children: /*#__PURE__*/_jsxDEV(\"main\", {\n      className: \"text-dark-shade bg-light dark:text-light-accent dark:bg-dark\",\n      children: children\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 51,\n    columnNumber: 5\n  }, this);\n};\n_s(ThemeContextProvider, \"dYJDqV9tNQyVwsPiiMNpAUp38T0=\");\n_c = ThemeContextProvider;\nvar _c;\n$RefreshReg$(_c, \"ThemeContextProvider\");","map":{"version":3,"names":["React","createContext","useEffect","useState","jsxDEV","_jsxDEV","ThemeContext","theme","toggleTheme","ThemeContextProvider","children","_s","setTheme","console","log","localStorage","window","matchMedia","matches","setDarkMode","document","documentElement","classList","add","remove","darkMode","toggleDarkMode","Provider","value","className","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/kalinramsey/Projects/ColorContrastChecker/chromagraph/src/Contexts/ThemeContext.tsx"],"sourcesContent":["import React, { ReactNode, createContext, useEffect, useState } from \"react\";\n\ntype ThemeContextType = {\n  theme: \"light\" | \"dark\";\n  toggleTheme: () => void;\n}\n\nexport const ThemeContext = createContext<ThemeContextType | undefined>({\n  theme: \"dark\",\n  toggleTheme: () => {},\n});\n\ninterface ThemeProviderProps {\n  children: ReactNode;\n}\n\nexport const ThemeContextProvider = ({ children }: ThemeProviderProps) => {\n  const [theme, setTheme] = useState<\"light\" | \"dark\">(\n    \n  );\n\n  useEffect(() => {\n    console.log('Setting initial theme:')\n    if (\n      localStorage.theme === \"dark\" ||\n      (!(\"theme\" in localStorage) &&\n        window.matchMedia(\"(prefers-color-scheme: dark)\").matches)\n    ) {\n      setDarkMode(true);\n      document.documentElement.classList.add(\"dark\");\n    } else {\n      setDarkMode(false);\n      document.documentElement.classList.remove(\"dark\");\n    }\n    console.log(darkMode ? 'dark' : 'light')\n  }, []);\n\n  const toggleDarkMode = () => {\n    if (darkMode) {\n      document.documentElement.classList.remove(\"dark\");\n      localStorage.theme = \"light\";\n      setDarkMode(false);\n    } else {\n      document.documentElement.classList.add(\"dark\");\n      localStorage.theme = \"dark\";\n      setDarkMode(true);\n    }\n  };\n\n  return (\n    <ThemeContext.Provider\n      value={{\n        darkMode,\n        toggleDarkMode,\n      }}>\n      <main className=\"text-dark-shade bg-light dark:text-light-accent dark:bg-dark\">\n        {children}\n      </main>\n    </ThemeContext.Provider>\n  );\n};\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAeC,aAAa,EAAEC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAO7E,OAAO,MAAMC,YAAY,gBAAGL,aAAa,CAA+B;EACtEM,KAAK,EAAE,MAAM;EACbC,WAAW,EAAEA,CAAA,KAAM,CAAC;AACtB,CAAC,CAAC;AAMF,OAAO,MAAMC,oBAAoB,GAAGA,CAAC;EAAEC;AAA6B,CAAC,KAAK;EAAAC,EAAA;EACxE,MAAM,CAACJ,KAAK,EAAEK,QAAQ,CAAC,GAAGT,QAAQ,CAElC,CAAC;EAEDD,SAAS,CAAC,MAAM;IACdW,OAAO,CAACC,GAAG,CAAC,wBAAwB,CAAC;IACrC,IACEC,YAAY,CAACR,KAAK,KAAK,MAAM,IAC5B,EAAE,OAAO,IAAIQ,YAAY,CAAC,IACzBC,MAAM,CAACC,UAAU,CAAC,8BAA8B,CAAC,CAACC,OAAQ,EAC5D;MACAC,WAAW,CAAC,IAAI,CAAC;MACjBC,QAAQ,CAACC,eAAe,CAACC,SAAS,CAACC,GAAG,CAAC,MAAM,CAAC;IAChD,CAAC,MAAM;MACLJ,WAAW,CAAC,KAAK,CAAC;MAClBC,QAAQ,CAACC,eAAe,CAACC,SAAS,CAACE,MAAM,CAAC,MAAM,CAAC;IACnD;IACAX,OAAO,CAACC,GAAG,CAACW,QAAQ,GAAG,MAAM,GAAG,OAAO,CAAC;EAC1C,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMC,cAAc,GAAGA,CAAA,KAAM;IAC3B,IAAID,QAAQ,EAAE;MACZL,QAAQ,CAACC,eAAe,CAACC,SAAS,CAACE,MAAM,CAAC,MAAM,CAAC;MACjDT,YAAY,CAACR,KAAK,GAAG,OAAO;MAC5BY,WAAW,CAAC,KAAK,CAAC;IACpB,CAAC,MAAM;MACLC,QAAQ,CAACC,eAAe,CAACC,SAAS,CAACC,GAAG,CAAC,MAAM,CAAC;MAC9CR,YAAY,CAACR,KAAK,GAAG,MAAM;MAC3BY,WAAW,CAAC,IAAI,CAAC;IACnB;EACF,CAAC;EAED,oBACEd,OAAA,CAACC,YAAY,CAACqB,QAAQ;IACpBC,KAAK,EAAE;MACLH,QAAQ;MACRC;IACF,CAAE;IAAAhB,QAAA,eACFL,OAAA;MAAMwB,SAAS,EAAC,8DAA8D;MAAAnB,QAAA,EAC3EA;IAAQ;MAAAoB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACL;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACc,CAAC;AAE5B,CAAC;AAACtB,EAAA,CA5CWF,oBAAoB;AAAAyB,EAAA,GAApBzB,oBAAoB;AAAA,IAAAyB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}